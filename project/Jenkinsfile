ipeline {
    agent any

    environment {
        PYTHON_VERSION = '3.9'
    }

    options {
        skipDefaultCheckout(false)
        disableConcurrentBuilds()
        timeout(time: 1, unit: 'HOURS')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Setup Python') {
            steps {
                script {
                    try {
                        // Try to install Python if not available
                        sh '''
                            if ! command -v python3 &> /dev/null; then
                                sudo apt-get update
                                sudo apt-get install -y python3 python3-venv python3-pip
                            fi
                        '''
                        
                        // Create and activate virtual environment
                        sh '''
                            python3 -m venv venv
                            . venv/bin/activate
                            python -m pip install --upgrade pip
                            pip install -r requirements.txt
                            pip install flake8 bandit pytest
                        '''
                    } catch (Exception e) {
                        error "Failed to setup Python environment: ${e.message}"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    try {
                        sh '''
                            . venv/bin/activate
                            mkdir -p test-results
                            python -m pytest tests/ --junitxml=test-results/junit.xml
                        '''
                    } catch (Exception e) {
                        unstable 'Tests failed'
                    }
                }
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: 'test-results/junit.xml'
                }
            }
        }

        stage('Lint') {
            steps {
                script {
                    try {
                        sh '''
                            . venv/bin/activate
                            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                        '''
                    } catch (Exception e) {
                        unstable 'Linting failed'
                    }
                }
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    try {
                        sh '''
                            . venv/bin/activate
                            mkdir -p reports
                            bandit -r . -ll -f json -o reports/security-report.json
                        '''
                    } catch (Exception e) {
                        unstable 'Security scan failed'
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'reports/*.json', allowEmptyArchive: true, fingerprint: true
                }
            }
        }
    }

    post {
        always {
            cleanWs(cleanWhenNotBuilt: false,
                   deleteDirs: true,
                   disableDeferredWipeout: true,
                   notFailBuild: true)
        }
        failure {
            echo 'Pipeline failed! Check the logs for details.'
        }
        unstable {
            echo 'Pipeline is unstable. Some stages had warnings.'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
