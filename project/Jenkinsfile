pipeline {
    agent any

    environment {
        PYTHON_VERSION = '3.9'
    }

    options {
        skipDefaultCheckout(false)
        disableConcurrentBuilds()
        timeout(time: 1, unit: 'HOURS')
    }

    triggers {
        pollSCM('H/15 * * * *')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Setup Python') {
            steps {
                script {
                    try {
                        // Check available Python versions
                        def pythonCmd = sh(
                            script: """
                                if command -v python${PYTHON_VERSION} &> /dev/null; then
                                    echo "python${PYTHON_VERSION}"
                                elif command -v python3 &> /dev/null; then
                                    echo "python3"
                                elif command -v python &> /dev/null; then
                                    echo "python"
                                else
                                    echo "none"
                                fi
                            """,
                            returnStdout: true
                        ).trim()

                        if (pythonCmd == "none") {
                            error "No Python installation found. Please install Python ${PYTHON_VERSION} or Python 3.x"
                        }

                        // Check Python version
                        def pythonVersion = sh(
                            script: "${pythonCmd} --version",
                            returnStdout: true
                        ).trim()
                        echo "Using ${pythonVersion}"

                        // Setup virtual environment
                        sh """
                            ${pythonCmd} -m venv venv || python3 -m venv venv
                            . venv/bin/activate
                            python -m pip install --upgrade pip
                            pip install -r requirements.txt
                            pip install flake8 bandit pytest
                        """
                    } catch (Exception e) {
                        error "Failed to setup Python environment: ${e.message}"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    try {
                        sh """
                            . venv/bin/activate
                            mkdir -p test-results
                            python -m pytest tests/ --junitxml=test-results/junit.xml
                        """
                    } catch (Exception e) {
                        unstable 'Tests failed'
                    }
                }
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: 'test-results/junit.xml'
                }
            }
        }

        stage('Lint') {
            steps {
                script {
                    try {
                        sh """
                            . venv/bin/activate
                            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                        """
                    } catch (Exception e) {
                        unstable 'Linting failed'
                    }
                }
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    try {
                        sh """
                            . venv/bin/activate
                            mkdir -p reports
                            bandit -r . -ll -f json -o reports/security-report.json
                        """
                    } catch (Exception e) {
                        unstable 'Security scan failed'
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'reports/*.json', allowEmptyArchive: true, fingerprint: true
                }
            }
        }
    }

    post {
        always {
            cleanWs(cleanWhenNotBuilt: false,
                   deleteDirs: true,
                   disableDeferredWipeout: true,
                   notFailBuild: true)
        }
        failure {
            echo 'Pipeline failed! Check the logs for details.'
        }
        unstable {
            echo 'Pipeline is unstable. Some stages had warnings.'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
